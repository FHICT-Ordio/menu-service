using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using System.IdentityModel.Tokens.Jwt;

using AL;
using FL;
using DTO;
using MenuContext = DAL.MenuContext;
using JWT.Exceptions;

namespace menu_service.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class PublicController : ControllerBase
    {

        private readonly IMenuCollection _menuCollection;
        private readonly JWTManager _jwtManager;

        public PublicController(MenuContext context, IMenuCollection? menuCollection = null)
        {
            _menuCollection = menuCollection ?? IMenuCollectionFactory.Get(context);
            _jwtManager = new("IsMUbet9tSM0O2Hf7DO92eg2l8vto74S9Tk19u558w6bJ2M3j75XM5s3oKqmCWAv");
        }

        /// <summary>
        /// Generate public menu token [A]
        /// </summary>
        /// <remarks>
        /// Generate an access token that can be used to retreive non-sensitive menu data through the public endpoint. An authorization token should be provided through the authorization header to authorize and identify the menu-owner.
        /// </remarks>
        /// <param name="menuID">The ID for which to generate a token</param>
        /// <response code="200">The menu exists, a Json Web Token that can be used for identification will be returned</response>
        /// <response code="400">The menu with given ID does not exist</response>
        /// <response code="401">The provided authorization token does not have the right authority to perform this action</response>
        [HttpGet]
        [Authorize]
        [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(string))]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [Route("Token/{menuID}")]
        public IActionResult? GenerateMenuToken(int menuID)
        {
            MenuDTO? menuDTO = _menuCollection.Get(menuID);

            if (menuDTO == null)
                return BadRequest("A menu with given ID does not exist");

            string user = AuthorizationHelper.GetRequestSub(Request);
            if (!HashManager.CompareStringToHash(user, menuDTO.Owner))
                return Unauthorized("A menu token can only be generated by the menu owner");

            Dictionary<string, object> json = new();
            json.Add("MenuID", menuDTO.ID);
            json.Add("Owner", menuDTO.Owner);

            string jwt = _jwtManager.Create(json);
            return Ok(jwt);
        }


        /// <summary>
        /// Get Menu
        /// </summary>
        /// <remarks>
        /// Get an existing Menu using the Menus identification token. This token can be aquired through the Ordio Admin Tool
        /// </remarks>
        /// <param name="token">The Menu token associated with the menu you want to retreive</param>
        /// <response code="200">The menu eixsts. The new menu object will be returned</response>
        /// <response code="400">The menu could not be found. More information will be given in the rensponse body</response>
        /// <response code="401">An error occured reading the token or the provided token or its signature was invalid</response>
        [HttpGet]
        [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(PublicMenu))]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [Route("GetMenu")]
        public IActionResult? GetMenu(string token)
        {
            try
            {
                Dictionary<string, object> json = _jwtManager.Decode(token, true);

                if (!json.ContainsKey("MenuID"))
                    throw new FormatException();

                MenuDTO? menu = _menuCollection.Get(Convert.ToInt32(json["MenuID"]));
                if (menu == null)
                    return BadRequest("A menu with this ID could not be found");

                return Ok(new PublicMenu(menu));

            } catch (TokenExpiredException)
            {
                return Unauthorized("The provided token has expired! Generate a new token using the admin tool");
            } catch (SignatureVerificationException)
            {
                return Unauthorized("The token's signature is invalid! Generate a new token using the admin tool");
            } catch (FormatException)
            {
                return Unauthorized("Something went wrong parsing the Menu token, please try again or generate a new token using the admin tool");
            }
        }
    }

    public class PublicMenu
    {
        public PublicMenu(MenuDTO menuDTO)
        {
            Title = menuDTO.Title;
            RestaurantName = menuDTO.RestaurantName;
            Description = menuDTO.Description;

            Items = new();
            foreach (ItemDTO itemDTO in menuDTO.Items)
            {
                Items.Add(new PublicItem(itemDTO));
            }

            Categories = new();
            foreach (CategoryDTO categoryDTO in menuDTO.Categories)
            {
                Categories.Add(new PublicCategory(categoryDTO));
            }
        }

        public string Title { get; set; }
        public string RestaurantName { get; set; }
        public string? Description { get; set; }


        public List<PublicItem> Items { get; set; }
        public List<PublicCategory> Categories { get; set; }
    }

    public class PublicCategory
    {
        public PublicCategory(CategoryDTO category)
        {
            Name = category.Name;
            Description = category.Description;

            Items = new();
            foreach (ItemDTO itemDTO in category.Items)
            {
                Items.Add(new PublicItem(itemDTO));
            }
        }
        public string Name { get; set; }
        public string? Description { get; set; }

        public List<PublicItem> Items { get; set; }
    }

    public class PublicItem
    {
        public PublicItem(ItemDTO itemDTO)
        {
            Name = itemDTO.Name;
            Description = itemDTO.Description;
            Price = itemDTO.Price;
            Tags = itemDTO.Tags;

            Categories = new();
            foreach (CategoryDTO categoryDTO in itemDTO.Categories)
            {
                Categories.Add(new PublicCategory(categoryDTO));
            }
        }

        public string Name { get; set; }
        public string? Description { get; set; }
        public float Price { get; set; }
        public List<string> Tags { get; set; }

        public List<PublicCategory> Categories { get; set; }
    }
}

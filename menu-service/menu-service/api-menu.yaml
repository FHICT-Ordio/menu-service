openapi: 3.0.1
info:
  title: Menu API
  description: An API used for handling restaurant menus
  version: v1
servers:
  - url: https://86.92.40.132:1000
    description: Main production server
  - url: https://localhost:1001
    description: Internal testing server
paths:
  '/Menu/{menuID}/Category':
    post:
      tags:
        - Category
      parameters:
        - name: menuID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          text/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Success
  '/Menu/{menuID}/Category/{categoryID}':
    get:
      tags:
        - Category
      parameters:
        - name: menuID
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: categoryID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
    put:
      tags:
        - Category
      parameters:
        - name: menuID
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: categoryID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryEdit'
          text/json:
            schema:
              $ref: '#/components/schemas/CategoryEdit'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CategoryEdit'
      responses:
        '200':
          description: Success
    delete:
      tags:
        - Category
      parameters:
        - name: menuID
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: categoryID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
  '/Menu/{menuID}/Item':
    post:
      tags:
        - Item
      parameters:
        - name: menuID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
          text/json:
            schema:
              $ref: '#/components/schemas/Item'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Success
  '/Menu/{menuID}/Item/{itemID}':
    get:
      tags:
        - Item
      parameters:
        - name: menuID
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: itemID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
    put:
      tags:
        - Item
      parameters:
        - name: menuID
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: itemID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemEdit'
          text/json:
            schema:
              $ref: '#/components/schemas/ItemEdit'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ItemEdit'
      responses:
        '200':
          description: Success
    delete:
      tags:
        - Item
      parameters:
        - name: menuID
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: itemID
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
  '/Menu/{menuID}/Item/All':
    get:
      tags:
        - Item
      parameters:
        - name: menuID
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: sort
          in: query
          schema:
            $ref: '#/components/schemas/SortType'
        - name: filter
          in: query
          schema:
            $ref: '#/components/schemas/FilterType'
        - name: filterParam1
          in: query
          schema:
            type: string
        - name: filterParam2
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
  /Menu:
    post:
      tags:
        - Menu
      summary: 'Add Menu [O]'
      description: Add a new Menu. An authorization token should be provided through the authorization header to authorize and identify the menu-owner.
      requestBody:
        description: A menu object to be added. The description field is optional
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
          text/json:
            schema:
              $ref: '#/components/schemas/Menu'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Menu'
      responses:
        '200':
          description: The menu was added. The new menu's ID will be returned
          content:
            text/plain:
              schema:
                type: integer
                format: int32
            application/json:
              schema:
                type: integer
                format: int32
            text/json:
              schema:
                type: integer
                format: int32
        '400':
          description: The menu could not be added. More information will be given in the rensponse body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/Menu/{menuID}':
    get:
      tags:
        - Menu
      summary: Get Menu
      description: Get an existing Menu.
      parameters:
        - name: menuID
          in: path
          description: The ID for the requested menu
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The menu eixsts. The new menu object will be returned
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Menu'
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
            text/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '400':
          description: The menu could not be found. More information will be given in the rensponse body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Menu
      summary: 'Update Menu [O]'
      description: Edit an existing Menu. An authorization token should be provided through the authorization header to authorize and identify the menu-owner.
      parameters:
        - name: menuID
          in: path
          description: The ID for the menu to be edited
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'The updated values to be edited. All field are optional, exluded fields will be retained'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuEdit'
          text/json:
            schema:
              $ref: '#/components/schemas/MenuEdit'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MenuEdit'
      responses:
        '200':
          description: The menu was edited
        '400':
          description: The menu could not be updated. More information will be given in the response body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: An authorization error occured. More information will be given in the response body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Menu
      summary: 'Delte Menu [O]'
      description: Delete an existing Menu. An authorization token should be provided through the authorization header to authorize and identify the menu-owner.
      parameters:
        - name: menuID
          in: path
          description: The ID for the menu to be deleted
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The menu was deleted
        '400':
          description: The menu could not be deleted. More information will be given in the response body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: An authorization error occured. More information will be given in the response body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /Menu/GetAll:
    get:
      tags:
        - Menu
      summary: 'Get User Menus [O]'
      description: Get all menus owner by a specific user. An authorization token should be provided through the authorization header to authorize and identify the user.
      parameters:
        - name: archived
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: All user menus will be returned
components:
  schemas:
    Category:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    CategoryEdit:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    FilterType:
      enum:
        - NONE
        - NAME
        - NAME_REGEX
        - PRICE_RANGE
      type: string
    Item:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        price:
          type: number
          format: float
        tags:
          type: array
          items:
            type: string
          nullable: true
        categories:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
      additionalProperties: false
    ItemEdit:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        price:
          type: number
          format: float
          nullable: true
        tags:
          type: array
          items:
            type: string
          nullable: true
        categories:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
      additionalProperties: false
    Menu:
      type: object
      properties:
        title:
          type: string
          nullable: true
        restaurantName:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    MenuEdit:
      type: object
      properties:
        title:
          type: string
          nullable: true
        restaurantName:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    SortType:
      enum:
        - ALP_ASC
        - ALP_DES
        - PRICE_ASC
        - PRICE_DES
      type: string
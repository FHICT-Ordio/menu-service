openapi: 3.0.1
info:
  title: Menu API
  description: An API used for handling restaurant menus
  version: v1
servers:
  - url: https://www.robinvanhoof.tech:1000
    description: Main production server
  - url: https://localhost:1001
    description: Internal testing server
paths:
  '/Menu/{menuID}/Category':
    post:
      tags:
        - Category
      summary: 'Add Category [A]'
      description: Add a new Category to a menu. An authorization token should be provided through the authorization header to authorize and identify the menu-owner.
      parameters:
        - name: menuID
          in: path
          description: The ID of the Menu for which to add a Category
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: A Category object. The description is an optional field
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          text/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: The category was added. The new Categorie's ID will be returned
          content:
            text/plain:
              schema:
                type: integer
                format: int32
            application/json:
              schema:
                type: integer
                format: int32
            text/json:
              schema:
                type: integer
                format: int32
        '400':
          description: The menu could not be found. More information will be given in the rensponse body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: The authorization token was invalid or not provided
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/Menu/{menuID}/Category/{categoryID}':
    get:
      tags:
        - Category
      summary: 'Get Category [A]'
      description: Get a Category from a specific Menu. An authorization token should be provided through the authorization header to authorize and identify the menu-owner.
      parameters:
        - name: menuID
          in: path
          description: The ID of the Menu the Category belongs to
          required: true
          schema:
            type: integer
            format: int32
        - name: categoryID
          in: path
          description: The ID of the Category to be retreived
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The category was found and will be returned as JSON object
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDTO'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDTO'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDTO'
        '400':
          description: The menu could not be found. More information will be given in the rensponse body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: The authorization token was invalid or not provided
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Category
      summary: 'Update Category [A]'
      description: Update a Category from a specific Menu. An authorization token should be provided through the authorization header to authorize and identify the menu-owner.
      parameters:
        - name: menuID
          in: path
          description: The ID of the Menu the Category belongs to
          required: true
          schema:
            type: integer
            format: int32
        - name: categoryID
          in: path
          description: The ID of the Category to be updated
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: An object containing the updated values for the category. Fields that are left out will not be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryEdit'
          text/json:
            schema:
              $ref: '#/components/schemas/CategoryEdit'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CategoryEdit'
      responses:
        '200':
          description: The category was updated
        '400':
          description: The menu or category could not be found. More information will be given in the rensponse body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: The authorization token was invalid or not provided
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Category
      summary: 'Delete Category [A]'
      description: Delete a Category from a specific Menu. An authorization token should be provided through the authorization header to authorize and identify the menu-owner.
      parameters:
        - name: menuID
          in: path
          description: The ID of the Menu the Category belongs to
          required: true
          schema:
            type: integer
            format: int32
        - name: categoryID
          in: path
          description: The ID of the Category to be deleted
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The category was deleted
        '400':
          description: The menu or category could not be found. More information will be given in the rensponse body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: The authorization token was invalid or not provided
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/Menu/{menuID}/Item':
    post:
      tags:
        - Item
      summary: 'Add Item [A]'
      description: Add a new Item to a menu. An authorization token should be provided through the authorization header to authorize and identify the menu-owner.
      parameters:
        - name: menuID
          in: path
          description: The ID of the Menu for which to add a Category
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'An Item object. The description, tags and categories are optional fields'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
          text/json:
            schema:
              $ref: '#/components/schemas/Item'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: The Item was added. The new Items's ID will be returned
          content:
            text/plain:
              schema:
                type: integer
                format: int32
            application/json:
              schema:
                type: integer
                format: int32
            text/json:
              schema:
                type: integer
                format: int32
        '400':
          description: The menu could not be found. More information will be given in the rensponse body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: The authorization token was invalid or not provided
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/Menu/{menuID}/Item/{itemID}':
    get:
      tags:
        - Item
      summary: 'Get Item [A]'
      description: Get an Item from a specific Menu. An authorization token should be provided through the authorization header to authorize and identify the menu-owner.
      parameters:
        - name: menuID
          in: path
          description: The ID of the Menu the Category belongs to
          required: true
          schema:
            type: integer
            format: int32
        - name: itemID
          in: path
          description: The ID of the Item to be retreived
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The Item was found and an will be returned as JSON object
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ItemDTO'
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDTO'
            text/json:
              schema:
                $ref: '#/components/schemas/ItemDTO'
        '400':
          description: The menu could not be found. More information will be given in the rensponse body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: The authorization token was invalid or not provided
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Item
      summary: 'Update Item [A]'
      description: Update an Item from a specific Menu. An authorization token should be provided through the authorization header to authorize and identify the menu-owner.
      parameters:
        - name: menuID
          in: path
          description: The ID of the Menu the Item belongs to
          required: true
          schema:
            type: integer
            format: int32
        - name: itemID
          in: path
          description: The ID of the Item to be updated
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: An object containing the updated values for the Item. Fields that are left out will not be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemEdit'
          text/json:
            schema:
              $ref: '#/components/schemas/ItemEdit'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ItemEdit'
      responses:
        '200':
          description: The Item was updated
        '400':
          description: The menu or Item could not be found. More information will be given in the rensponse body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: The authorization token was invalid or not provided
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Item
      summary: 'Delete Item [A]'
      description: Delete an Item from a specific Menu. An authorization token should be provided through the authorization header to authorize and identify the menu-owner.
      parameters:
        - name: menuID
          in: path
          description: The ID of the Menu the Item belongs to
          required: true
          schema:
            type: integer
            format: int32
        - name: itemID
          in: path
          description: The ID of the Item to be deleted
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The Item was deleted
        '400':
          description: The Menu or Item could not be found. More information will be given in the rensponse body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: The authorization token was invalid or not provided
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /Menu:
    post:
      tags:
        - Menu
      summary: 'Add Menu [A]'
      description: Add a new Menu. An authorization token should be provided through the authorization header to authorize and identify the menu-owner.
      requestBody:
        description: A menu object to be added. The description field is optional
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
          text/json:
            schema:
              $ref: '#/components/schemas/Menu'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Menu'
      responses:
        '200':
          description: The menu was added. The new menu's ID will be returned
          content:
            text/plain:
              schema:
                type: integer
                format: int32
            application/json:
              schema:
                type: integer
                format: int32
            text/json:
              schema:
                type: integer
                format: int32
        '400':
          description: The menu could not be added. More information will be given in the rensponse body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: An authorization error occured. More information will be given in the response body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/Menu/{menuID}':
    get:
      tags:
        - Menu
      summary: 'Get Menu [A]'
      description: Get an existing Menu. An authorization token should be provided through the authorization header to authorize and identify the user.
      parameters:
        - name: menuID
          in: path
          description: The ID for the requested menu
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The menu eixsts. The new menu object will be returned
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MenuDTO'
            application/json:
              schema:
                $ref: '#/components/schemas/MenuDTO'
            text/json:
              schema:
                $ref: '#/components/schemas/MenuDTO'
        '400':
          description: The menu could not be found. More information will be given in the rensponse body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: An authorization error occured. More information will be given in the response body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Menu
      summary: 'Update Menu [A]'
      description: Edit an existing Menu. An authorization token should be provided through the authorization header to authorize and identify the menu-owner.
      parameters:
        - name: menuID
          in: path
          description: The ID for the menu to be edited
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'The updated values to be edited. All field are optional, exluded fields will be retained'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuEdit'
          text/json:
            schema:
              $ref: '#/components/schemas/MenuEdit'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MenuEdit'
      responses:
        '200':
          description: The menu was edited
        '400':
          description: The menu could not be updated. More information will be given in the response body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: An authorization error occured. More information will be given in the response body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Menu
      summary: 'Delte Menu [A]'
      description: Delete an existing Menu. An authorization token should be provided through the authorization header to authorize and identify the menu-owner.
      parameters:
        - name: menuID
          in: path
          description: The ID for the menu to be deleted
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The menu was deleted
        '400':
          description: The menu could not be deleted. More information will be given in the response body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: An authorization error occured. More information will be given in the response body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /Menu/GetAll:
    get:
      tags:
        - Menu
      summary: 'Get User Menus [A]'
      description: Get all menus owner by a specific user. An authorization token should be provided through the authorization header to authorize and identify the user.
      parameters:
        - name: archived
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: All user menus will be returned
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuDTO'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuDTO'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuDTO'
        '401':
          description: An authorization error occured. More information will be given in the response body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/Public/Token/{menuID}':
    get:
      tags:
        - Public
      summary: 'Generate public menu token [A]'
      description: Generate an access token that can be used to retreive non-sensitive menu data through the public endpoint. An authorization token should be provided through the authorization header to authorize and identify the menu-owner.
      parameters:
        - name: menuID
          in: path
          description: The ID for which to generate a token
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'The menu exists, a Json Web Token that can be used for identification will be returned'
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '400':
          description: The menu with given ID does not exist
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: The provided authorization token does not have the right authority to perform this action
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /Public/GetMenu:
    get:
      tags:
        - Public
      summary: Get Menu
      description: Get an existing Menu using the Menus identification token. This token can be aquired through the Ordio Admin Tool
      parameters:
        - name: token
          in: query
          description: The Menu token associated with the menu you want to retreive
          schema:
            type: string
      responses:
        '200':
          description: The menu eixsts. The new menu object will be returned
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PublicMenu'
            application/json:
              schema:
                $ref: '#/components/schemas/PublicMenu'
            text/json:
              schema:
                $ref: '#/components/schemas/PublicMenu'
        '400':
          description: The menu could not be found. More information will be given in the rensponse body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: An error occured reading the token or the provided token or its signature was invalid. More information will be given in the rensponse body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /Public/GetMenuItems:
    get:
      tags:
        - Public
      summary: Get All Menu Items
      description: Get all of a specific Menus items using the Menus public identification token. This token can be aquired through the Ordio Admin Tool. Different kinds of filtering and sorting can be applied.
      parameters:
        - name: token
          in: query
          description: The Menu token associated with the menu you want to retreive
          schema:
            type: string
        - name: sort
          in: query
          description: The sort type to apply to the returned items. The default sort is alphabetically ascending
          schema:
            $ref: '#/components/schemas/SortType'
        - name: filter
          in: query
          description: The type of filter to apply.
          schema:
            $ref: '#/components/schemas/FilterType'
        - name: filterParam1
          in: query
          description: The first argument to apply to the filtering. For name filtering supply a string that the items name has to contain. For Regex filtering supply a Regex string. For price range filtering supply a lower bound.
          schema:
            type: string
        - name: filterParam2
          in: query
          description: 'The second argument to apply to the filtering. For name and Regex filtering this field is not required. For price filtering, supply an upper bound'
          schema:
            type: string
      responses:
        '200':
          description: A list of items with the specified filtering and sorting will be returned
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicItem'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicItem'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicItem'
        '400':
          description: The menu could not be found. More information will be given in the rensponse body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: An error occured reading the token or the provided token or its signature was invalid. More information will be given in the rensponse body
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    Category:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    CategoryDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        archived:
          type: boolean
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemDTO'
          nullable: true
      additionalProperties: false
    CategoryEdit:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    FilterType:
      enum:
        - NONE
        - NAME
        - NAME_REGEX
        - PRICE_RANGE
      type: string
    Item:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        price:
          type: number
          format: float
        tags:
          type: array
          items:
            type: string
          nullable: true
        categories:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
      additionalProperties: false
    ItemDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        price:
          type: number
          format: float
        tags:
          type: array
          items:
            type: string
          nullable: true
        archived:
          type: boolean
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryDTO'
          nullable: true
      additionalProperties: false
    ItemEdit:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        price:
          type: number
          format: float
          nullable: true
        tags:
          type: array
          items:
            type: string
          nullable: true
        categories:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
      additionalProperties: false
    Menu:
      type: object
      properties:
        title:
          type: string
          nullable: true
        restaurantName:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    MenuDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        owner:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        restaurantName:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        lastEdited:
          type: string
          format: date-time
        archived:
          type: boolean
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemDTO'
          nullable: true
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryDTO'
          nullable: true
      additionalProperties: false
    MenuEdit:
      type: object
      properties:
        title:
          type: string
          nullable: true
        restaurantName:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    PublicCategory:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/PublicItem'
          nullable: true
      additionalProperties: false
    PublicItem:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        price:
          type: number
          format: float
        tags:
          type: array
          items:
            type: string
          nullable: true
        categories:
          type: array
          items:
            $ref: '#/components/schemas/PublicCategory'
          nullable: true
      additionalProperties: false
    PublicMenu:
      type: object
      properties:
        title:
          type: string
          nullable: true
        restaurantName:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/PublicItem'
          nullable: true
        categories:
          type: array
          items:
            $ref: '#/components/schemas/PublicCategory'
          nullable: true
      additionalProperties: false
    SortType:
      enum:
        - ALP_ASC
        - ALP_DES
        - PRICE_ASC
        - PRICE_DES
      type: string